// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./build/go/echo/v1.pb.go

package danbelden_echo_v1

import (
	context "context"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// Mock of EchoServiceClient interface
type MockEchoServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockEchoServiceClientRecorder
}

// Recorder for MockEchoServiceClient (not exported)
type _MockEchoServiceClientRecorder struct {
	mock *MockEchoServiceClient
}

func NewMockEchoServiceClient(ctrl *gomock.Controller) *MockEchoServiceClient {
	mock := &MockEchoServiceClient{ctrl: ctrl}
	mock.recorder = &_MockEchoServiceClientRecorder{mock}
	return mock
}

func (_m *MockEchoServiceClient) EXPECT() *_MockEchoServiceClientRecorder {
	return _m.recorder
}

func (_m *MockEchoServiceClient) Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	_s := []interface{}{ctx, in}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Say", _s...)
	ret0, _ := ret[0].(*SayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEchoServiceClientRecorder) Say(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Say", _s...)
}

// Mock of EchoServiceServer interface
type MockEchoServiceServer struct {
	ctrl     *gomock.Controller
	recorder *_MockEchoServiceServerRecorder
}

// Recorder for MockEchoServiceServer (not exported)
type _MockEchoServiceServerRecorder struct {
	mock *MockEchoServiceServer
}

func NewMockEchoServiceServer(ctrl *gomock.Controller) *MockEchoServiceServer {
	mock := &MockEchoServiceServer{ctrl: ctrl}
	mock.recorder = &_MockEchoServiceServerRecorder{mock}
	return mock
}

func (_m *MockEchoServiceServer) EXPECT() *_MockEchoServiceServerRecorder {
	return _m.recorder
}

func (_m *MockEchoServiceServer) Say(_param0 context.Context, _param1 *SayRequest) (*SayResponse, error) {
	ret := _m.ctrl.Call(_m, "Say", _param0, _param1)
	ret0, _ := ret[0].(*SayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockEchoServiceServerRecorder) Say(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Say", arg0, arg1)
}
